hist(rnorm(1000),breaks=50,probability=TRUE)#정규분포
rnorm(5)
rnorm(5)
set.seed(12345)
rnorm(5)
rnorm(5)
set.seed(12345)
set.seed(12345)
rnorm(5)
set.seed(12345)
rnorm(5)
?rcauchy
set.seed(1234)
plot(timeseries_data(-1.2,100,'rnorm'),type='l',xlab='t',ylab='Xt',main='rho=-1.2')
##1. 타임시리즈 데이터를 생성하는 함수
timeseries_data<-function(rho,nsmp,dtb,		#rho는 rho,nsmp는 표본 수,dtb는 분포
rnorm_mean=0,rnorm_std=1,	#정규분포 옵션(평균,표준편차)
runif_min=-1,runif_max=1,	#균등분포 옵션(최소,최대)
rcauchy_loc=0,rcauchy_scale=1,	#코시분포 옵션(위치모수,척도모수)
rchisq_df=1				#카이제곱분포 옵션(자유도)
)
{
if(dtb=='rnorm'){n<-rnorm(nsmp,rnorm_mean,rnorm_std)}		#오차 생성
else if (dtb=='runif'){n<-runif(nsmp,runif_min,runif_max)}
else if (dtb=='rcauchy'){n<-rcauchy(nsmp,rcauchy_loc,rcauchy_scale)}
else if (dtb=='rchisq'){n<-rchisq(nsmp,df=rchisq_df)-1}
else{geterrmessage('이 함수는 정규분포, 균등분포,코시분포에서만 표본추출이 가능합니다.')}
rh<-vector()
xx<-vector()	#객체 생성
for (i in 1:length(n)) 	# rho 생성 1, rho, rho**2, ... rho**(t-1)
{
rh[i]<-(rho)**(i-1)
}
for (i in 1:length(n))
{
xx[i]<-sum(rh[1:i]*n[i:1])	#1*Et + rho*Et-1 + .....
}
return(xx)
} # timeseries_data function
set.seed(1234)
plot(timeseries_data(-1.2,100,'rnorm'),type='l',xlab='t',ylab='Xt',main='rho=-1.2')
set.seed(1234)
plot(timeseries_data(-1.2,100,'runif'),type='l',xlab='t',ylab='Xt',main='rho=-1.2')
set.seed(1234)
plot(timeseries_data(-1.2,100,'rcauchy'),type='l',xlab='t',ylab='Xt',main='rho=-1.2')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
xt_plot(1,100,'rnorm')
xt_plot(1,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(-1,100,'rchisq')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
xt_plot(-1,100,'rchisq')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
xt_plot(-1,100,'rchisq')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
set.seed(123)
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
set.seed(123)
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
set.seed(123)
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
set.seed(123)
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
set.seed(123)
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
set.seed(123)
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
set.seed(123)
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
set.seed(123)
xt_plot(0,100,'rchisq')
xt_plot(1,100,'rchisq')
xt_plot(1.1,100,'rchisq')
xt_plot(-1.1,100,'rchisq')
for i in number:
for(i in 10):
for(i in 10)
print(i)
sample(c(1,-1), 1)
sample(c(1,-1), 1)
sample(c(1,-1), 1)
sample(c(1,-1), 1)
sample(c(1,-1), 1)
sample(c(1,-1), 1)
sample(c(1,-1), 1)
sample(c(1,-1), 1)
sample(c(1,-1), 1)
a = 5
print("a is ", a)
cat("a is", a)
cat("a is ", a)
error = sample(c(1,-1), 1)
cat(a, "th error:", error)
source('~/.active-rstudio-document')
random_walk(10)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
random_walk(10)
source('~/.active-rstudio-document')
random_walk(10)
source('~/.active-rstudio-document')
random_walk(10)
source('~/.active-rstudio-document')
random_walk(10)
source('~/.active-rstudio-document')
random_walk(10)
random_walk(10)
random_walk(10)
random_walk(10)
random_walk(10)
random_walk(10)
data(AirPassengers)
data(AirPassengers)
force(AirPassengers)
AirPassengers
class(AirPassengers)
?class
a = 1
class(a)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers, FUN=mean))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
plot(aggregate(AirPassengers, FUN=mean))
source('~/.active-rstudio-document')
c(samsung_profit_2016, samsung_profit_2017)
samsung_total_revenue = c(samsung_profit_2016 + samsung_revenue_2017 + samsung_revenue_2018
+ samsung_revenue_2019)
samsung_total_revenue = c(samsung_profit_2016 + samsung_revenue_2017 + samsung_revenue_2018 + samsung_revenue_2019)
samsung_total_revenue = c(samsung_revenue_2016 + samsung_revenue_2017 + samsung_revenue_2018 + samsung_revenue_2019)
samsung_total_revenue = c(samsung_revenue_2016, samsung_revenue_2017,
samsung_revenue_2018, samsung_revenue_2019)
samsung_total_revenue
samsung_total_profit = c(samsung_profit_2016, samsung_profit_2017,
samsung_profit_2018, samsung_profit_2019)
samsung_total_profit
df = data.frame(samsung_total_revenue, samsung_total_profit)
df
df <- data.frame(x = c(TRUE, FALSE, NA, NA), y = c(12, 34, 56, 78))
df
row.names(df) <- 1:4
df
attr(df, "row.names")
deparse(df)
row.names(df)
row.names(df) <- c(2, 4, 6, 8)
df
df = data.frame(samsung_total_revenue, samsung_total_profit)
row.names(df) <- ("2016_1Q", "2016_2Q", "2016_3Q", "2016_4Q",
"2017_1Q", "2017_2Q", "2017_3Q", "2017_4Q",
"2018_1Q", "2018_2Q", "2018_3Q", "2018_4Q",
"2019_1Q", "2019_2Q", "2019_3Q")
df = data.frame(samsung_total_revenue, samsung_total_profit)
row.names(df) <- c("2016_1Q", "2016_2Q", "2016_3Q", "2016_4Q",
"2017_1Q", "2017_2Q", "2017_3Q", "2017_4Q",
"2018_1Q", "2018_2Q", "2018_3Q", "2018_4Q",
"2019_1Q", "2019_2Q", "2019_3Q")
df
col.names(df) <- c("매출", "영업이익")
colnames(df) <- c("매출", "영업이익")
df
samsung_data = data.frame(samsung_total_revenue, samsung_total_profit)
row.names(samsung_data) <- c("2016_1Q", "2016_2Q", "2016_3Q", "2016_4Q",
"2017_1Q", "2017_2Q", "2017_3Q", "2017_4Q",
"2018_1Q", "2018_2Q", "2018_3Q", "2018_4Q",
"2019_1Q", "2019_2Q", "2019_3Q")
colnames(samsung_data) <- c("매출", "영업이익")
samsung_data
마 = a
마 = 1
마
source('~/.active-rstudio-document')
samsung_data
source('~/.active-rstudio-document')
View(samsung_data)
library(ggplot2)
View(df)
source('~/.active-rstudio-document')
View(samsung_data)
View(samsung_data)
profit
revenue
quarter
View(samsung_data)
View(samsung_data)
samsung_data = data.frame(분기=quarter, 매출=revenue, 영업이익=profit)
samsung_data
View(samsung_data)
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
View(samsung_data)
ggplot(data=samsung_data, aes(x=quarter, y=revenue, group=1)) +
geom_line() +
geom_point()
ggplot(data=samsung_data, aes(x=quarter, y=revenue, group=1)) +
geom_line()
geom_point()
ggplot(data=samsung_data, aes(x=quarter, y=revenue, group=1)) +
geom_point()
ggplot(data=samsung_data, aes(x=quarter, y=profit, group=1)) +
geom_line() +
geom_point()
ggplot() +
geom_line(data=samsung_data, aes(x=quarter, y=revenue), color="blue") +
geom_line(data=samsung_data, aes(x=quarter, y=profit), color="red") +
geom_point()
ggplot() +
geom_line(data=samsung_data, aes(x=quarter, y=profit), color="red") +
geom_line(data=samsung_data, aes(x=quarter, y=revenue), color="red")
source('~/.active-rstudio-document')
View(prescription1)
View(prescription2)
View(prescription1)
View(prescription1)
ggplot(samsung_data, aes(x=quarter)) +
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y=revenue)), color = "blue") +
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y=revenue), color = "blue") +
geom_line(aes(y=profit), color = "red") +
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y=profit), color = "red") +
geom_line(aes(y=revenue), color = "blue")
ggplot(economics, aes(x=분기)) +
geom_line(aes(y = 매출), color = "darkred") +
geom_line(aes(y = 영업이익), color="steelblue")
View(samsung_data)
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
ggplot(economics, aes(x=a)) +
geom_line(aes(y = b), color = "darkred") +
geom_line(aes(y = c), color="steelblue")
ggplot(samsung_data, aes(x=a)) +
geom_line(aes(y = b), color = "darkred") +
geom_line(aes(y = c), color="steelblue")
ggplot(samsung_data, aes(x=a), group=1) +
geom_line(aes(y = b), color = "darkred") +
geom_line(aes(y = c), color="steelblue")
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
ggplot(samsung_data, aes(x=quarter), group=1) +
geom_line(aes(y = revenue), color = "darkred") +
geom_line(aes(y = profit), color="steelblue")
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred")
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point()
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue))
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), color="steelblue") +
geom_point(aes(y = profit))
# 이익실적 그래프를 그림
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), group=1, color="steelblue") +
geom_point(aes(y = profit))
p <- ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), group=1, color="steelblue") +
geom_point(aes(y = profit))
p
p + theme(legend.position="bottom")
# 이익실적 그래프를 그림
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), group=1, color="steelblue") +
geom_point(aes(y = profit))
source('~/.active-rstudio-document')
setwd("~/Desktop/University/2019-2/bigdata")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), group=1, color="steelblue") +
geom_point(aes(y = profit))
source('~/.active-rstudio-document')
set.seed(123)
data_test<-timeseries_data(0.3,100,'rnorm')
source('~/Desktop/University/2019-2/bigdata/1일차_프로젝트코드_기울기랜덤워크검정.R', encoding = 'CP949')
set.seed(123)
data_test<-timeseries_data(0.3,100,'rnorm')
data_test
test_z<-sign_test_normal(data_test,sign='eql')
View(test_z)
test_z<-sign_test_normal(before_stock_split,sign='eql')
sign_test_normal(before_stock_split$종가, sign='eql')
sign_test_normal(after_stock_split$종가, sign='eql')
test_z<-sign_test_normal(before_stock_split,sign='eql')
test_z
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
test_z
test_z[3]
test_z[[3]]
hist(test_z,main='b들의 분포',breaks=30)
test_z
#pvalue들의 히스토그램
data_z<-0
for (i in 1:100)				 #실험을 100번 반복.
{
test<-timeseries_data(1,1000,'rnorm')#rho는 1, 데이터는 1000개 사용.
data_test<-sign_test_normal(test)
data_z[i]<-data_test[[3]]		 #pvalue는 data_test의 3번째 리스트에 존재
}
hist(data_z,main='pvalue들의 분포')
price_after_split
source('~/.active-rstudio-document')
View(after_stock_split)
for (i in 1:100) {}
for (i in 1:100) { print(i) }
length(after_stock_split)
length(price_after_split)
s = 0
s[1]= 1
s[2] = 2
s
View(after_stock_split)
View(after_stock_split)
source('~/.active-rstudio-document')
s
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
test_z
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
simulate_coinflip
type(coin_flip)
type(simulate_coinflip)
class(simulate_coinflip)
table(simulate_coinflip)
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
coinflip_result
class(coinflip_result)
coinflip_result[names(coinflip_result)=='heads']
coinflip_result[names(coinflip_result)=='heads']
coinflip_result[names(coinflip_result)=='heads']
coinflip_result[names(coinflip_result)=='heads']
coinflip_result[names(coinflip_result)=='heads']
coinflip_result[numbers(coinflip_result)=='heads']
sum(coinflip_result == 'heads')
sum(coinflip_result == heads)
sum(coinflip_result == heads)
sum(coinflip_result == 'heads)
sadf
coinflip_result <- table(sample(coinflip, size = 386, replace=TRUE))
coinflip_result
sum(coinflip_result == 'heads')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
sum(coinflip_result == 'heads')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
?hist
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
source('~/Desktop/University/2019-2/bigdata/coin_flip.R')
library("readxl")
# after stock split to present
after_stock_split <- read_excel("samsung-stock-price.xlsx", sheet=1)
# past to stock split
before_stock_split <- read_excel("samsung-stock-price.xlsx", sheet=2)
# extract the price from the data
after_stock_split$종가
before_stock_split$종가
# timeseries graph for both before & after
plot(after_stock_split$종가, type="l",
main="Samsung Stock Price After Split",
xlab="t", ylab="xt(price)")
plot(before_stock_split$종가, type="l",
main="Samsung Stock Price Before Split",
xlab="t", ylab="xt(price)")
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), group=1, color="steelblue") +
geom_point(aes(y = profit))
revenue = c(49.78, 50.94, 47.82, 53.33, 50.55, 61.00, 62.05, 65.98,
60.56, 58.48, 65.46, 59.27, 52.39, 56.13, 62.00)
profit = c(6.68, 8.14, 5.20, 9.22, 9.90, 14.07, 14.53, 15.15,
15.64, 14.87, 17.57, 10.80, 6.23, 6.60, 7.78)
quarter = c("2016_1Q", "2016_2Q", "2016_3Q", "2016_4Q", "2017_1Q", "2017_2Q", "2017_3Q", "2017_4Q",
"2018_1Q", "2018_2Q", "2018_3Q", "2018_4Q", "2019_1Q", "2019_2Q", "2019_3Q")
samsung_data = data.frame(분기=quarter, 매출=revenue, 이익=profit)
library(ggplot2)
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), group=1, color="steelblue") +
geom_point(aes(y = profit))
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), group=1, color="steelblue") +
geom_point(aes(y = profit)) +
ggtitle("Revenue and Profit Comparison")
ggplot(samsung_data, aes(x=quarter)) +
geom_line(aes(y = revenue), group=1, color = "darkred") +
geom_point(aes(y = revenue)) +
# 이익
geom_line(aes(y = profit), group=1, color="steelblue") +
geom_point(aes(y = profit)) +
ggtitle("Samsung Revenue and Profit Comparison")
plot(after_stock_split$종가, type="l",
main="Samsung Stock Price After Split",
xlab="t", ylab="xt(price)")
plot(after_stock_split$종가, type="l",
main="Samsung Stock Price After Split",
xlab="t", ylab="xt(price)")
plot(before_stock_split$종가, type="l",
main="Samsung Stock Price Before Split",
xlab="t", ylab="xt(price)")
plot(after_stock_split$종가, type="l",
main="Samsung Stock Price After Split",
xlab="t", ylab="xt(price)")
s = 0
for (i in 1:length(price_after_split)-2) {
s[i] = (price_after_split[i+2] - price_after_split[i+1]) /
(price_after_split[i+1] - price_after_split[i])
}
hist(s, breaks=50, main="기울기들의 분포")
hist(s, breaks=50, main="Si Distribution")
hist(s, breaks=50, main="Si Distribution(n=386,number of si=n-2")
hist(s, breaks=50, main="Si Distribution(n=386, Number of Si's=n-2)")
test_z
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트(1).R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
source('~/Desktop/University/2019-2/bigdata/파이널프로젝트.R', encoding = 'CP949')
