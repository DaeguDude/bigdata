prob=T, col="brown")
lines(density(sample_means), col="blue", lwd=1)
hist(sample_means, main="Sampling distribution of sample means", xlab="Sample Menas",
prob=T, col="brown")
lines(density(sample_means), col="blue", lwd=5)
plot(x, norm.dist, main='Normal Distribution')
x = rlnorm(500,1,.6)
x
x = rlnorm(10000,1, 2)
x
plot(density(x))
x = rlnorm(n = 1000, meanlog = 0, sdlog = 2)
x
plot(density(x))
x = rlnorm(n = 100, meanlog = 0, sdlog = 2)
plot(density(x))
x = rlnorm(n = 500, meanlog = 0, sdlog = 2)
plot(density(x), main='lognormal distribution with sd 2')
x = rlnorm(n = 500, meanlog = 3, sdlog = 2)
plot(density(x), main='lognormal distribution with sd 2')
x = rlnorm(n = 500, meanlog = 100, sdlog = 2)
plot(density(x), main='lognormal distribution with sd 2')
x = rlnorm(n = 500, meanlog = 0, sdlog = 2)
plot(density(x), main='lognormal distribution with sd 2')
mean(x)
mean(x)
mean(x)
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
x = rlnorm(n = 500, meanlog = 0, sdlog = 2)
plot(density(x), main='lognormal distribution with sd 2')
log_sample_means = 0
for(i in 1:1000) {
log_sample_mean = mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
log_sample_means[i] = log_sample_mean
}
log_sample_means
x = rlnorm(n = 500, meanlog = 0, sdlog = 2)
plot(density(x), main='lognormal distribution with sd 2')
log_sample_means = 0
for(i in 1:1000) {
log_sample_mean = mean(rlnorm(n = 500, meanlog = 0, sdlog = 2))
log_sample_means[i] = round(log_sample_mean, 2)
}
hist(log_sample_means, main="Sampling distribution of log sample means", xlab="log Sample Means",
prob=T, col="darkred")
lines(density(sample_means), col="blue", lwd=5)
hist(log_sample_means, main="Sampling distribution of log sample means", xlab="log Sample Means",
prob=T, col="darkred")
lines(density(log_sample_means), col="blue", lwd=5)
x = rlnorm(n = 1000, meanlog = 0, sdlog = 2)
plot(density(x), main='lognormal distribution with sd 2')
log_sample_means = 0
for(i in 1:1000) {
log_sample_mean = mean(rlnorm(n = 1000, meanlog = 0, sdlog = 2))
log_sample_means[i] = round(log_sample_mean, 2)
}
hist(log_sample_means, main="Sampling distribution of log sample means", xlab="log Sample Means",
prob=T, col="darkred")
lines(density(log_sample_means), col="blue", lwd=5)
source('~/Desktop/2019-1 Exchange Semester/Applied Statistics/Homework/Homework3/Homework3.R')
x.norm <- seq(150, 200, by = .001)
# Choose the mean and sd for normal distribution and make normal distribuiton
norm.dist <- dnorm(x.norm, mean=175, sd = 5)
# Plot normal distribution
plot(x.norm, norm.dist, main='Normal Distribution')
x.norm <- seq(150, 200, by = .001)
# Choose the mean and sd for normal distribution and make normal distribuiton
norm.dist <- dnorm(x.norm, mean=175, sd = 5)
# Plot normal distribution
plot(x.norm, norm.dist, main='Normal Distribution')
# (A-2)Extract the sample of N size for multiple times, let's say 10 times here
sample_means = 0
for(i in 1:5) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
x.norm <- seq(150, 200, by = .001)
# Choose the mean and sd for normal distribution and make normal distribuiton
norm.dist <- dnorm(x.norm, mean=175, sd = 5)
# Plot normal distribution
plot(x.norm, norm.dist, main='Normal Distribution')
# (A-2)Extract the sample of N size for multiple times, let's say 10 times here
sample_means = 0
for(i in 1:5) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
sample_means
?plot
plot(x.norm, norm.dist, main='Normal Distribution')
point(sample_means, col="darkred")
points(sample_means, col="darkred")
points(sample_means, col="darkred")
points(sample_means, cex=.5, col="darkred")
sample_means
for(i in 1:10) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
points(sample_means, type='p', pch=23, col='red')
example.norm <- seq(150, 200, by = 1)
example.dist <- dnorm(example.norm, mean=175, sd=3)
plot(example.norm, example.dist)
points(sample_means, type='p', pch=23, col='red')
points(sample_means, y = 0, type='p', pch=23, col='red')
points(sample_means, y = 0, type='p', pch=23, col='red')
source('~/Desktop/2019-1 Exchange Semester/Applied Statistics/Homework/Homework3/Homework3.R')
for(i in 1:10) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
plot(x.norm, norm.dist, main='Normal Distribution')
points(sample_means, y = 0, col="darkred")
points(sample.means, col="red", pch=19)
points(sample_means, col="red", pch=19)
for(i in 1:5) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
for(i in 1:5) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
sample_means
sample_means = 0
for(i in 1:5) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
sample_means
points(sample_means, y = 0, col="darkred")
points(sample_means, y = c(0,0,0,0,0), col="darkred")
sample_means = 0
for(i in 1:10) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
plot(x.norm, norm.dist, main='Normal Distribution')
points(sample_means, y = rep(0, times=10), col="darkred")
x.norm <- seq(150, 200, by = .001)
# Choose the mean and sd for normal distribution and make normal distribuiton
norm.dist <- dnorm(x.norm, mean=175, sd = 5)
# Plot normal distribution
plot(x.norm, norm.dist, main='Normal Distribution')
sample_means = 0
for(i in 1:10) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
# (A-3) Plot those means to the graph
plot(x.norm, norm.dist, main='Normal Distribution')
points(sample_means, y = rep(0, times=10), col="darkred")
x.log = rlnorm(n = 1000, meanlog = 0, sdlog = 2)
plot(density(x.log), main='lognormal distribution with sd 2')
log_sample_means = 0
for(i in 1:1000) {
log_sample_mean = mean(rlnorm(n = 1000, meanlog = 0, sdlog = 2))
log_sample_means[i] = round(log_sample_mean, 2)
}
hist(log_sample_means, main="Sampling distribution of log sample means", xlab="log Sample Means",
prob=T, col="darkred")
lines(density(log_sample_means), col="blue", lwd=5)
# I will extract sample size of 30 and calculate the sample mean
# Do it for 1,000 times to see if it makes normal distribution
sample_means = 0
for(i in 1:1000) {
sample = rnorm(30 ,mean=175, sd=5)
sample_mean = round(mean(sample), 2)
sample_means[i] = sample_mean
}
hist(sample_means, main="Sampling distribution of sample means", xlab="Sample Means",
prob=T, col="brown")
lines(density(sample_means), col="blue", lwd=5)
source('~/Desktop/2019-1 Exchange Semester/Applied Statistics/Homework/Homework3/Homework(3-2).R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
conf.calculator(sample_1, .05)
View(conf.calculator)
attributes(conf.calculator)
conf.calculator(sample_1, .05)
sample_1
conf.calculator(sample_1, .05)
sample.mean = round(mean(sample_1), 2)
sample_1 = c(10, 27, 30, 40, 46, 51, 52, 104, 146)
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
# Standard error
#se = round(sd(sample) / sqrt(length(sample)), 2)
#z = 1.96
# two sided 95% Confidence interval of NORMAL DISTRIBUTION
#z_lower_bound_sample = round(sample.mean - (z * se), 2)
#z_upper_bound_sample = round(sample.mean + (z * se), 2)
}
conf.calculator(sample_1, alpha)
conf.calculator(sample_1, 0.05)
0.05/2
1 - 0.025
qnorm(0.025)
qnorm(lower_bound)
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
#lower_bound = 0 + (alpha/2)
#upper_bound = 1 - (alpha/2)
return sample.mean
# Standard error
#se = round(sd(sample) / sqrt(length(sample)), 2)
#z = 1.96
# two sided 95% Confidence interval of NORMAL DISTRIBUTION
#z_lower_bound_sample = round(sample.mean - (z * se), 2)
#z_upper_bound_sample = round(sample.mean + (z * se), 2)
}
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
#lower_bound = 0 + (alpha/2)
#upper_bound = 1 - (alpha/2)
return sample.mean
# Standard error
#se = round(sd(sample) / sqrt(length(sample)), 2)
#z = 1.96
# two sided 95% Confidence interval of NORMAL DISTRIBUTION
#z_lower_bound_sample = round(sample.mean - (z * se), 2)
#z_upper_bound_sample = round(sample.mean + (z * se), 2)
}
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
#lower_bound = 0 + (alpha/2)
#upper_bound = 1 - (alpha/2)
return sample.mean
}
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
#lower_bound = 0 + (alpha/2)
#upper_bound = 1 - (alpha/2)
return(sample.mean)
}
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
#lower_bound = 0 + (alpha/2)
#upper_bound = 1 - (alpha/2)
return(sample.mean)
}
conf.calculator(sample_1, 0.05)
return(sample.mean, 5)
return(sample.mean, 5)
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
#lower_bound = 0 + (alpha/2)
#upper_bound = 1 - (alpha/2)
return(c(2,5))
}
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
#lower_bound = 0 + (alpha/2)
#upper_bound = 1 - (alpha/2)
return(c(2,5))
}
conf.calculator()
conf.calculator(sample_1, 0.05)
conf.calculator <- function(sample, alpha) {
sample.mean = round(mean(sample), 2)
# Standard error
se = round(sd(sample) / sqrt(length(sample)), 2)
# calculate the corresponding z score to the siginificance levell
z = qnorm(alpha/2)
# two sided 95% Confidence interval of NORMAL DISTRIBUTION
lower_bound_sample = round(sample.mean - (z * se), 2)
upper_bound_sample = round(sample.mean + (z * se), 2)
conf_interval_sample = c(lower_bound_sample, upper_bound_sample)
return(conf_interval_sample)
}
conf.calculator(sample_1, 0.05)
source('~/.active-rstudio-document')
conf.calculator(sample_1, 0.05)
source('~/Desktop/2019-1 Exchange Semester/Applied Statistics/Homework/Homework3/Homework(3-2).R')
num_sample
num.sample
set.seed(13579)
num.sample = length(sample_1)
B <- 10000
Boot.sample <- matrix( sample(sample_1, size=B*num.sample,
replace=TRUE), ncol=B, nrow=num.sample)
View(Boot.sample)
dim(Boot.sample)
Boot.sample[1:9, 1:10]
colMeans(Boot.sample)
Boot.Means <- colMeans(Boot.sample)
Boot.Means
length(Boot.Means)
quantile(Boot.Means, prob=0.025)
quantile(Boot.Means, prob=0.975)
Boot.sample <- matrix( sample(sample_1, size=B*num.sample,
replace=TRUE), ncol=B, nrow=num.sample)
# Make a confidence interval of 1-a, I will do 95% two sided confidence interval here
Boot.Means <- colMeans(Boot.sample)
quantile(Boot.Means, prob=0.025)
quantile(Boot.Means, prob=0.975)
Boot.sample <- matrix( sample(sample_1, size=B*num.sample,
replace=TRUE), ncol=B, nrow=num.sample)
# Make a confidence interval of 1-a, I will do 95% two sided confidence interval here
Boot.Means <- colMeans(Boot.sample)
quantile(Boot.Means, prob=0.025)
quantile(Boot.Means, prob=0.975)
Boot.sample <- matrix( sample(sample_1, size=B*num.sample,
replace=TRUE), ncol=B, nrow=num.sample)
# Make a confidence interval of 1-a, I will do 95% two sided confidence interval here
Boot.Means <- colMeans(Boot.sample)
quantile(Boot.Means, prob=0.025)
quantile(Boot.Means, prob=0.975)
Boot.sample <- matrix( sample(sample_1, size=B*num.sample,
replace=TRUE), ncol=B, nrow=num.sample)
# Make a confidence interval of 1-a, I will do 95% two sided confidence interval here
Boot.Means <- colMeans(Boot.sample)
quantile(Boot.Means, prob=0.025)
quantile(Boot.Means, prob=0.975)
Boot.sample <- matrix( sample(sample_1, size=B*num.sample,
replace=TRUE), ncol=B, nrow=num.sample)
# Make a confidence interval of 1-a, I will do 95% two sided confidence interval here
Boot.Means <- colMeans(Boot.sample)
quantile(Boot.Means, prob=0.025)
quantile(Boot.Means, prob=0.975)
Boot.Means <- colMeans(Boot.sample)
Boot_lower_bound = quantile(Boot.Means, prob=0.025)
Boot_upper_bound = quantile(Boot.Means, prob=0.975)
Boot_lower_bound
?boot
?boot
?boot()
e = boot(data=sample_1, statistic=bs, R=1000)
install.packages('boot')
e = boot(data=sample_1, statistic=bs, R=1000)
library(boot)
e = boot(data=sample_1, statistic=bs, R=1000)
b = boot(sample_1, sample_1_mean, R=1000)
b = boot(sample_1, statistic=sample_1_mean, R=1000)
meanfun <- function(sample, i){
d <- sample[i, ]
}
meanfun <- function(sample, i){
d <- sample[i, ]
}
meanfun <- function(sample, i){
d <- sample[i, ]
return(mean(d))
}
meanfun <- function(sample, i){
d <- sample[i, ]
return(mean(d))
}
b = boot(sample_1, statistic=meanfun, R=1000)
b = boot(sample_1, statistic=meanfun, R=1000)
meanfun <- function(sample){
return(mean(sample))
}
b = boot(sample_1, statistic=meanfun, R=1000)
sample_1
data <- data.frame(xs = rnorm(15, 2))
library(boot)
meanfun <- function(data, i){
d <- data[i, ]
return(mean(d))
}
data
meanfun
meanfun(data, i)
boot(sample_1, meanfun, R=500)
library(boot)
meanfun <- function(data, i){
d <- data
return(mean(d))
}
boot(sample_1, meanfun, R=500)
boot(sample_1, meanfun, R=500)
boot(sample_1, meanfun, R=500)
summary(boot(sample_1, meanfun, R=500))
fc <- function(d, i){
d2 <- d[i,]
return(cor(d2$write, d2$math))
}
boot <- boot(sample_1, fc, R=500)
meanfun <- function(data, i){
d <- data
return(mean(d))
}
boot(sample_1, meanfun, R=500)
boot(sample_1, meanfun, R=500)
boot.ci(boot.out = boot, type = c("norm", "basic", "perc", "bca"))
source('~/Desktop/2019-1 Exchange Semester/Applied Statistics/Homework/Homework3/Homework(3-2).R')
x <- 1:3
mode(x)
y <- c(0, "a","b")
mode(y)
z <- c(T,F,T)
mode(z)
cc <- c(2i, 3,2+3i)
mode(cc)
x <- 1:5; y <- 6:10 # Two lines are combined into one.
x^2
x+y
x*3
sqrt(x)
print(x <- c(1:10,15))
mean(x)
median(x)
sd(x)
sqrt(var(x))
mean(abs(x-median(x)))
median(abs(x-median(x)))
mad(x,const=1)
summary(x)
print(x <- c(1,3:6))
x[2]
x[c(2,4)]
x[-c(2,4)]
x>3
x[x>3]
x[x>4|x<2]
matrix(1:6,nrow=2)
matrix(1:6,nrow=2,byrow=T)
x <- 1:3; y <- 4:6
print(z <- c(x,y))
dim(z) <- c(2,3)
z
dim(z)
rbind(x,y)
cbind(x,y)
print(m1 <- matrix(c(1,3,2,5),nrow=2))
print(m2 <- matrix(5:8,nrow=2))
m2
m1+m2
m1+1:2
m1*m2
m1%*%m2
solve(m1)
t(m1)
1:3%o%10:13
print(m <- matrix(c(1:9,12), ncol=2))
mean(m)
var(m)
sum((m-mean(m))**2)/(length(m)-1)
apply(m,2,mean)
apply(m,2,var)
print(m <- matrix(1:9,nrow=3))
m[1,2]
m[1,]
m[-3,-1]
array(1:8)
array(1:8,c(2,4))
array(1:8,c(2,2,2))
print(char <- rep(letters[1:3],c(2,4,1)))
print(num <- rep(1:3,c(2,4,1)))
print(logic <- c(T,F,T))
data <- data.frame(char,num)
data
lst <- list(char,no=num,lg=logic)
lst
lst[[3]]
lst$lg
x <- scan("d:/num.dat")
x
y <- scan("d:/char.dat", what="")
y
x <- scan("num.dat")
setwd("~/Desktop/University/2019-2/Rstat")
x <- scan("num.dat")
x
y <- scan("d:/char.dat", what="")
y <- scan("char.dat", what="")
y
dat1 <- read.table("tab1.dat",header=T,row.names=1)
dat1
var(dat1)
attach(dat1)
MID+FINAL
detach()
dat2 <- read.table("tab2.dat",row.names=NULL)
dat2 <- read.table("tab1.dat",row.names=NULL)
dat2
search()
attach(dat1)
search()
tot <- MID+FINAL
ls()
ls(pos=2)
detach()
search()
